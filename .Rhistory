library(caret)
rfuncs
rfFuncs
rfFuncs$summary
twoClassSummar
twoClassSummary
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
b1 <- cor(x,y)*sd(y)/sd(x)
b0 <- mean(y) - b1 * mean(x)
b0
b1=1000000000000
b0 <- 0 - b1 *0
bo
b0
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm (y~x)
z <- lm(y~x)
summary(x)
summary(z)
data(mtcars)
data("mtcars")
str(mtcars)
fit <- lm(mpg ~ factor(cyl)+wt)
fit <- lm(mpg ~ factor(cyl)+wt,mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl)*wt,mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl)+wt,mtcars)
fit2 <- lm(mpg ~ factor(cyl):wt,mtcars)
summary(fit)
summary(fit2)
fit2 <- lm(mpg ~ factor(cyl)*wt,mtcars)
summary(fit2)
data("mtcars")
summary(mtcars)
str(mtcars)
pairs(mtcars)
pairs(mtcars)
library(ggplot2)
plotmatrix(mtcars[,1:3])
install.packages("ggplot2")
library(ggplot2)
plotmatrix(mtcars[,1:3])
install.packages("ggally")
install.packages("GGally")
library(GGally)
ggpairs(mtcars)
ggpairs(mtcars)
ggpairs(mtcars)
pairs(mtcars)
pairs(mtcars,main="Pairs plot for mtcars")
pairs(mtcars,mpg~.,main="Pairs plot for mtcars")
pairs(mpg~., mtcars,main="Pairs plot for mtcars")
pairs(lm(mpg~.), mtcars,main="Pairs plot for mtcars")
pairs(mtcars, panel=function(x,y){
points(x,y)
abline(lm(y~x), col='red')
})
pairs(mtcars, panel=function(x,y){
points(x,y)
abline(glm(y~x), col='red')
})
pairs(mtcars, panel=function(x,y){
points(x,y)
abline(lm(y~x), col='red')
}, main="Pairs plot for mtcars")
g <- ggplot(mtcars, aes(am,mpg))
g <- geom_boxplot()
g
g
g <- ggplot(mtcars, aes(factor(am),mpg))
g <- geom_boxplot()
g
g <- geom_boxplot(aes(fill=factor(am)))
g
g
g
print(g)
library(ggplot2)
g <- ggplot(mtcars, aes(factor(am),mpg))
g <- geom_boxplot(aes(fill=factor(am)))
g
g <- ggplot(mtcars, aes(factor(am),mpg))
g
g <- geom_boxplot(aes(fill=factor(am)))
g
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
str(mtcars)
g <- ggplot(mtcars, aes(am,mpg))
g <- geom_boxplot(aes(fill=am))
g
print(g)
g <- ggplot(mtcars, aes(am,mpg))
g <- g + ggplot(mtcars, aes(am,mpg))
g <- ggplot(mtcars, aes(am,mpg))
g <- g + geom_boxplot(aes(fill=am))
g
g <- g + ggplot(mtcars, aes(am,mpg), main="MPG x Transmission Type")
g <- ggplot(mtcars, aes(am, mpg))
g <- g + geom_boxplot(aes(fill=am))
g <- g + xlab("Transmission Type") + ylab("MPG") + ggtitle("MPG x Transmission Type")
g
base_model <- lm(mpg ~., mtcars)
best_model <- step(base_model, direction = "both")
best_model
hat_values <- hatvalues(best_model)
sort(hat_values)
hat_values <- hatvalues(best_model)
tail(sort(hat_values),5)
df_betas <- dfbetas(best_model)
df_betas
hat_values <- hatvalues(best_model)
df_betas <- dfbetas(best_model)
tail(sort(hat_values),3)
tail(sort(df_betas[,6]), 3)
t.test(mpg~am, mtcars)
best_model
best_model$coefficients
?mtcars
best_model
plot(best_model)
mfrow=c(1,1)
par(mfrow=c(1,1))
par(mfrow=c(1,1))
source('~/Documents/Machine Learning/Projeto/Kaggle-Expedia/Scripts/MachineLearningProject/improvedXgb.R')
setwd("~/Documents/Machine Learning/Projeto/Kaggle-Expedia/Scripts/MachineLearningProject")
load("bookingTrain.RData")
source("functions.R")
bookingTrain[is.na(bookingTrain)] <- -1
bookingTrain2013 <- as.h2o(subset(bookingTrain, dt_year == 2013))
bookingTrain2014 <- as.h2o(subset(bookingTrain, dt_year == 2014))
dfResults <- data.frame(size=numeric(),scoreTrain=numeric(),scoreValid=numeric())
possibleRatios <- c(.08,.09,0.1,.11,.12)
for(ratio in possibleRatios){
cat("Starting: ",ratio)
splitTrain <- h2o.splitFrame(bookingTrain2013, ratios=ratio,seed=-1)
splitValid <- h2o.splitFrame(bookingTrain2014, ratios=.03,seed=-1)
train <- as.data.frame(splitTrain[1][[1]])
valid <- as.data.frame(splitValid[1][[1]])
trainLabel <- train$hotel_cluster
train$hotel_cluster <- NULL
validLabel <- valid$hotel_cluster
valid$hotel_cluster <- NULL
trainMatrix <- data.matrix(train)
validMatrix <- data.matrix(valid)
dtrain <-xgb.DMatrix(trainMatrix, label=trainLabel)
nrounds <- 100
eta <- 0.03
col_sampling <- 0.6
max_depth <- 6
param <- list(objective           = "multi:softprob",
booster             = "gbtree",
num_class           = 100,
eta                 = eta,
max_depth           = max_depth,
colsample_bytree    = col_sampling)
xgbModel <- xgb.train(param, dtrain,nrounds=100)
predictionsArrayTrain <- predict(xgbModel,trainMatrix)
predictionsMatrixTrain <- matrix(predictionsArrayTrain, nrow=nrow(trainMatrix), ncol=100, byrow=T)
predictionsArrayValid <- predict(xgbModel, validMatrix)
predictionsMatrixValid <- matrix(predictionsArrayValid, nrow=nrow(validMatrix), ncol=100, byrow=T)
predsTrain <- list()
predsValid <- list()
for(i in 1:nrow(predictionsMatrixTrain)){
predictions <- order(-as.numeric(predictionsMatrixTrain[i,1:100]))-1
predsTrain <- c(predsTrain, list(predictions))
}
for(i in 1:nrow(predictionsMatrixValid)){
predictions <- order(-as.numeric(predictionsMatrixValid[i,1:100]))-1
predsValid <- c(predsValid, list(predictions))
}
scoreTrain <- mapk(5,trainLabel,predsTrain)
scoreValid <- mapk(5,validLabel,predsValid)
tmpResult <- data.frame(size=nrow(train),scoreTrain=scoreTrain,scoreValid=scoreValid)
dfResults <- rbind(dfResults, tmpResult)
cat(" - Finished")
write.csv(dfResults,file = "improvedXgb.csv",row.names = F, quote = F)
}
dfResults
library(ggplot2)
results <- read.csv("resultsXgb.csv")
dfResultsM6 <- subset(results, max_depth==6,select=c("col_sampling","scoreValid","scoreTrain"))
dfResultsM4 <- subset(results, max_depth==4,select=c("col_sampling","scoreValid","scoreTrain"))
g <- ggplot()
g <- g + geom_line(data=dfResultsM6,aes(x=col_sampling,y=scoreTrain,color="Train MAP@5 - M6"),size=2)
g <- g + geom_line(data=dfResultsM6,aes(x=col_sampling,y=scoreValid,color="Valid MAP@5 - M6"),size=2)
g <- g + geom_line(data=dfResultsM4,aes(x=col_sampling,y=scoreTrain,color="Train MAP@5 - M4"),size=2)
g <- g + geom_line(data=dfResultsM4,aes(x=col_sampling,y=scoreValid,color="Valid MAP@5 - M4"),size=2)
g <- g + xlab("ColSample") + ylab("Precision")
g <- g + scale_color_manual("Metrics",values=c("blue","black","red","purple"))
g <- g + ggtitle("Tree Boosting - Predicted on all clusters")
ggsave(filename="xgbgraph.png", g, height=7, width=7)
library(ggplot2)
results <- read.csv("resultsRf.csv")
dfResultsMaxDepth1 <- subset(results, max_depth==10 ,select=c("mtries","scoreValid","scoreTrain"))
dfResultsMaxDepth2 <- subset(results, max_depth==20 ,select=c("mtries","scoreValid","scoreTrain"))
dfResultsMaxDepth3 <- subset(results, max_depth==30 ,select=c("mtries","scoreValid","scoreTrain"))
g <- ggplot()
g <- g + geom_line(data=dfResultsMaxDepth1,aes(x=mtries,y=scoreTrain,color="Train MAP@5 - MaxDepth=10"),size=2)
g <- g + geom_line(data=dfResultsMaxDepth1,aes(x=mtries,y=scoreValid,color="Valid MAP@5 - MaxDepth=10"),size=2)
g <- g + geom_line(data=dfResultsMaxDepth2,aes(x=mtries,y=scoreTrain,color="Train MAP@5 - MaxDepth=20"),size=2)
g <- g + geom_line(data=dfResultsMaxDepth2,aes(x=mtries,y=scoreValid,color="Valid MAP@5 - MaxDepth=20"),size=2)
g <- g + geom_line(data=dfResultsMaxDepth3,aes(x=mtries,y=scoreTrain,color="Train MAP@5 - MaxDepth=30"),size=2)
g <- g + geom_line(data=dfResultsMaxDepth3,aes(x=mtries,y=scoreValid,color="Valid MAP@5 - MaxDepth=30"),size=2)
g <- g + xlab("Mtries") + ylab("Precision")
g <- g + scale_color_manual("Metrics",values=c("blue","black","red","purple","gray","green"))
g <- g + ggtitle("Random Forest - Predicted on all clusters")
g <- g + scale_x_continuous(breaks=seq(1:9))
ggsave(filename="rdgraph.png", g, height=7, width=7)
results <- read.csv("improvedXgb.csv")
results <- read.csv("improvedXgb.csv")
g <- ggplot()
g <- g + geom_line(data=results,aes(x=size,y=scoreTrain,color="Train MAP@5 - M6"),size=2)
g <- g + geom_line(data=results,aes(x=size,y=scoreValid,color="Valid MAP@5 - M6"),size=2)
g <- g + xlab("Size") + ylab("Precision")
g <- g + scale_color_manual("Metrics",values=c("blue","black"))
g <- g + ggtitle("Tree Boosting")
ggsave(filename="xgbgraph2.png", g, height=7, width=7)
